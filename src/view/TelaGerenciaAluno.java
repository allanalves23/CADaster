package view;

import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import modelbean.StudentBean;
import modeldao.SearchDao;
import modeldao.UpdateDao;

/**
 *
 * @author allan
 */
public class TelaGerenciaAluno extends javax.swing.JInternalFrame {
    
    /**
     * Creates new form TelaGerenciaAluno
     */
    private static TelaGerenciaAluno tela;
    /*variavel estatica para verificar se existe mais de um objeto do mesmo
    tipo aberto*/ 
    
    public static TelaGerenciaAluno getAbrir(){
        if(tela==null){
            tela= new TelaGerenciaAluno(); 
        }
        /*se a tela estiver null, ou seja, se nao estiver nada aberto. Abra uma!
        Senao matenha a mesma aberta  */
        return tela;
    }
   
    
    public TelaGerenciaAluno() {
        initComponents();
        setIcon();
    }
    
    //muda o icone do jInternalFrame
    private void setIcon() {
        setFrameIcon(new ImageIcon(this.getClass().getResource("/imagens/LogoFrame.png")));
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        fundo = new javax.swing.JPanel();
        panelPesq = new javax.swing.JPanel();
        lblNome = new javax.swing.JLabel();
        campoNome = new javax.swing.JTextField();
        lblGrauEnsino = new javax.swing.JLabel();
        grauEnsino = new javax.swing.JComboBox<>();
        lblMatricula = new javax.swing.JLabel();
        campoMatricula = new javax.swing.JFormattedTextField();
        btnPesquisa = new javax.swing.JButton();
        btnLimpar = new javax.swing.JButton();
        lblTipoPesquisa = new javax.swing.JLabel();
        checkAddMatricula = new javax.swing.JCheckBox();
        lblInfoMsg = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        btnConfirmar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaStudent = new javax.swing.JTable();
        btnLimparTabela = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setTitle("CADaster - Modificar aluno");
        setPreferredSize(new java.awt.Dimension(1020, 600));
        addInternalFrameListener(new javax.swing.event.InternalFrameListener() {
            public void internalFrameActivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameClosed(javax.swing.event.InternalFrameEvent evt) {
                formInternalFrameClosed(evt);
            }
            public void internalFrameClosing(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeactivated(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameDeiconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameIconified(javax.swing.event.InternalFrameEvent evt) {
            }
            public void internalFrameOpened(javax.swing.event.InternalFrameEvent evt) {
            }
        });
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentMoved(java.awt.event.ComponentEvent evt) {
                formComponentMoved(evt);
            }
        });

        panelPesq.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Pesquisar aluno", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 12))); // NOI18N

        lblNome.setText("Nome");

        lblGrauEnsino.setText("Grau de Ensino");

        grauEnsino.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Selecione", "Primario", "Ginasio", "Ensino Medio", "Tecnico" }));

        lblMatricula.setText("Matricula");

        try {
            campoMatricula.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###-###-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        campoMatricula.setEnabled(false);

        btnPesquisa.setText("Pesquisar");
        btnPesquisa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesquisaActionPerformed(evt);
            }
        });

        btnLimpar.setText("Limpar campos");
        btnLimpar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparActionPerformed(evt);
            }
        });

        lblTipoPesquisa.setText("Tipos de pesquisa");

        checkAddMatricula.setText("Adicionar matricula a pesquisa");
        checkAddMatricula.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkAddMatriculaActionPerformed(evt);
            }
        });

        lblInfoMsg.setForeground(new java.awt.Color(255, 0, 0));
        lblInfoMsg.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);

        javax.swing.GroupLayout panelPesqLayout = new javax.swing.GroupLayout(panelPesq);
        panelPesq.setLayout(panelPesqLayout);
        panelPesqLayout.setHorizontalGroup(
            panelPesqLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPesqLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelPesqLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(checkAddMatricula)
                    .addComponent(lblGrauEnsino)
                    .addComponent(lblMatricula)
                    .addGroup(panelPesqLayout.createSequentialGroup()
                        .addGroup(panelPesqLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(campoMatricula, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(panelPesqLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(lblNome)
                                .addComponent(campoNome, javax.swing.GroupLayout.PREFERRED_SIZE, 121, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(grauEnsino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnLimpar, javax.swing.GroupLayout.Alignment.TRAILING)))
                        .addGap(18, 18, 18)
                        .addComponent(btnPesquisa, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblTipoPesquisa)
                    .addComponent(lblInfoMsg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(38, Short.MAX_VALUE))
        );
        panelPesqLayout.setVerticalGroup(
            panelPesqLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelPesqLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(lblNome)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lblTipoPesquisa)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(checkAddMatricula)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(lblMatricula)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(campoMatricula, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lblGrauEnsino)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(grauEnsino, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addComponent(lblInfoMsg, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panelPesqLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPesquisa)
                    .addComponent(btnLimpar))
                .addGap(46, 46, 46))
        );

        btnConfirmar.setText("Confirmar");
        btnConfirmar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmarActionPerformed(evt);
            }
        });

        tabelaStudent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Matricula", "Nome", "CPF", "Data de Nascimento", "CEP", "Endereco", "Bairro", "Responsável", "Nome do Mãe", "Nome da Pai", "Grau", "Ano"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, true, true, true, true, true, true, true, true, true, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaStudent.setAutoscrolls(false);
        tabelaStudent.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tabelaStudent.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tabelaStudent);

        btnLimparTabela.setText("Limpar Tabela");
        btnLimparTabela.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimparTabelaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 619, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnLimparTabela)
                        .addGap(18, 18, 18)
                        .addComponent(btnConfirmar, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnLimparTabela)
                    .addComponent(btnConfirmar))
                .addContainerGap())
        );

        javax.swing.GroupLayout fundoLayout = new javax.swing.GroupLayout(fundo);
        fundo.setLayout(fundoLayout);
        fundoLayout.setHorizontalGroup(
            fundoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fundoLayout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addComponent(panelPesq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );
        fundoLayout.setVerticalGroup(
            fundoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(fundoLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(fundoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(panelPesq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(44, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fundo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(fundo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    //fecha a tela
    private void btnLimparActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparActionPerformed
        limparInputs(true);
    }//GEN-LAST:event_btnLimparActionPerformed

    private void formInternalFrameClosed(javax.swing.event.InternalFrameEvent evt) {//GEN-FIRST:event_formInternalFrameClosed
       
    }//GEN-LAST:event_formInternalFrameClosed

    /* Metodo para definir a posicao fixa do JinternalFrame (Aplicavel 
    em janelas que estao como default Maximizaveis
    */
    private void formComponentMoved(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentMoved

    }//GEN-LAST:event_formComponentMoved

    private void limparInputs(){
        campoNome.setText("");
        campoMatricula.setText("");
        DefaultTableModel model = (DefaultTableModel) tabelaStudent.getModel();
        model.setNumRows(0);
        grauEnsino.setSelectedItem("Selecione");
    }
    
    private void limparInputs(boolean status){
        if(status){
            campoNome.setText("");
            campoMatricula.setText("");
            grauEnsino.setSelectedItem("Selecione");
        }else{
             DefaultTableModel model = (DefaultTableModel) tabelaStudent.getModel();
             model.setNumRows(0);
        }
    }
    
    private void btnPesquisaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesquisaActionPerformed
        if(grauEnsino.getSelectedItem().toString().equals("Selecione")){ 
            limparInputs();
            JOptionPane.showMessageDialog(null, "O Nivel educacional nao foi selecionado");
       }else{
           if(campoNome.getText().length() > 0 || campoMatricula.getText().length() == 12){
                String grau="";
                DefaultTableModel model = (DefaultTableModel)tabelaStudent.getModel();
                model.setNumRows(0);
                SearchDao sd = new SearchDao();
                switch(grauEnsino.getSelectedItem().toString()){
                    case "Primario":
                        grau="anoPrimario";
                        break;
                    case "Ginasio":
                        grau="anoGinasio";
                        break;
                    case "Ensino Medio":
                        grau="anoEM";
                        break;
                    case "Tecnico":
                        grau="anoTecnico";
                        break;
                }
                if(checkAddMatricula.isSelected()){//procurar se checkbox matricula estiver selecionado
                    for(StudentBean student : sd.procurarStudent(campoNome.getText(), campoMatricula.getText(), grauEnsino.getSelectedItem().toString(), grau,true)){
                    model.addRow(new Object[]{
                        student.getMatricula(),
                        student.getNome(),
                        student.getCPF(),
                        student.getDataNasc(),
                        student.getCEP(),
                        student.getEndereco(),
                        student.getBairro(),
                        student.getResponsavel(),
                        student.getNomeMae(),
                        student.getNomePai(),
                        student.getGrau(),
                        student.getAno()
                    });
                }
                    if(model.getRowCount()==0){
                        lblInfoMsg.setText("Nenhum registro foi encontrado");
                        lblInfoMsg.setIcon(new ImageIcon(getClass().getResource("/imagens/warning.png")));
                                
                    }else{
                        lblInfoMsg.setText("");
                        lblInfoMsg.setIcon(new ImageIcon());
                    }
                    
                }else{//procurar se checkbox matricula nao estiver selecionado
                    for(StudentBean student : sd.procurarStudent(campoNome.getText(), campoMatricula.getText(), grauEnsino.getSelectedItem().toString(), grau,false)){
                    model.addRow(new Object[]{
                        student.getMatricula(),
                        student.getNome(),
                        student.getCPF(),
                        student.getDataNasc(),
                        student.getCEP(),
                        student.getEndereco(),
                        student.getBairro(),
                        student.getResponsavel(),
                        student.getNomeMae(),
                        student.getNomePai(),
                        student.getGrau(),
                        student.getAno()
                        });
                    }
                    if(model.getRowCount()==0){
                        lblInfoMsg.setText("Nenhum registro foi encontrado");
                        lblInfoMsg.setIcon(new ImageIcon(getClass().getResource("/imagens/warning.png")));
                                
                    }else{
                        lblInfoMsg.setText("");
                        lblInfoMsg.setIcon(new ImageIcon());
                    }
                }
           }else{
                if(campoNome.getText().length()==0){
                    JOptionPane.showMessageDialog(this, "O campo nome está vazio","Nome não informado",2);
                    limparInputs();
                
            }
           }   
       }
    }//GEN-LAST:event_btnPesquisaActionPerformed

    private void btnConfirmarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmarActionPerformed
        if(tabelaStudent.getSelectedRow() != -1){
           SearchDao sd = new SearchDao();
           String matricula=tabelaStudent.getValueAt(tabelaStudent.getSelectedRow(), 0).toString();
                if(sd.verificarMatricula(matricula)){
                      int count=0;
                      UpdateDao upd = new UpdateDao();
                      String grau="";
                      String nome = tabelaStudent.getValueAt(tabelaStudent.getSelectedRow(), 1).toString();
                      String CPF = tabelaStudent.getValueAt(tabelaStudent.getSelectedRow(), 2).toString();
                      String dataNascimento = tabelaStudent.getValueAt(tabelaStudent.getSelectedRow(), 3).toString();
                      String CEP = tabelaStudent.getValueAt(tabelaStudent.getSelectedRow(), 4).toString();
                      String endereco = tabelaStudent.getValueAt(tabelaStudent.getSelectedRow(), 5).toString();
                      String bairro = ""; 
                      if(tabelaStudent.getValueAt(tabelaStudent.getSelectedRow(), 6)!=null){
                        bairro = tabelaStudent.getValueAt(tabelaStudent.getSelectedRow(), 6).toString();
                      }else{
                          
                          count ++;
                      }
                      
                      String responsavel = tabelaStudent.getValueAt(tabelaStudent.getSelectedRow(), 7).toString();
                      String nomeMae = "";
                      
                      if(tabelaStudent.getValueAt(tabelaStudent.getSelectedRow(), 8)!=null){
                        nomeMae = tabelaStudent.getValueAt(tabelaStudent.getSelectedRow(), 8).toString();
                      }else{
                          count +=2;
                      }
                       String nomePai = "";
                      if(tabelaStudent.getValueAt(tabelaStudent.getSelectedRow(), 9)!=null){
                        nomePai = tabelaStudent.getValueAt(tabelaStudent.getSelectedRow(), 9).toString();
                      }else{
                          count+=4;
                      }
                      
               switch (tabelaStudent.getValueAt(tabelaStudent.getSelectedRow(), 10).toString()) {
                   case "Primario":
                       grau = "anoPrimario";
                       break;
                   case "Ginasio":
                       grau = "anoGinasio";
                       break;
                   case "Ensino Medio":
                       grau = "anoEM";
                       break;
                   case "Tecnico":
                       grau = "anoTecnico";
                       break;
                   default:
                       break;
               }
                      String ano = tabelaStudent.getValueAt(tabelaStudent.getSelectedRow(), 11).toString();
                      boolean resposta=false;
            switch(count){
        
                case 0://se todos os campos estiverem preenchidos
                {
                   
                    try {
                            resposta = upd.updateStudent(matricula, nome, CPF, dataNascimento, CEP, endereco, bairro, responsavel, nomeMae, nomePai, grau, ano);
                        } catch (SQLException ex) {
                            Logger.getLogger(TelaGerenciaAluno.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    break;
                }
                case 1://se campo Bairro nao estiver preenchido
                {   
                    try {
                            resposta = upd.updateStudent(matricula, nome, CPF, dataNascimento, CEP, endereco, responsavel, nomeMae, nomePai, grau, ano);
                        } catch (SQLException ex) {
                            Logger.getLogger(TelaGerenciaAluno.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    break;
                   
                }
                case 2://se o campo mae nao estiver preenchido
                {
                    try {
                            resposta = upd.updateStudent(matricula, nome, CPF, dataNascimento, CEP, endereco, bairro, responsavel, nomePai, grau, ano,false);
                        } catch (SQLException ex) {
                            Logger.getLogger(TelaGerenciaAluno.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    break;
                }
                case 4://se o campo pai nao estiver preenchido
                {
                    try {
                           resposta = upd.updateStudent(matricula, nome, CPF, dataNascimento, CEP, endereco, bairro, responsavel, nomeMae, grau, ano,'N');
                        } catch (SQLException ex) {
                            Logger.getLogger(TelaGerenciaAluno.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    break;
                }
                case 3://se o campo bairro e mae nao estiverem preenchidos
                {
                     try {
                           resposta = upd.updateStudent(matricula, nome, CPF, dataNascimento, CEP, endereco, responsavel, nomePai, grau, ano);
                        } catch (SQLException ex) {
                            Logger.getLogger(TelaGerenciaAluno.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    break;
                }
                case 5://se o campo pai e bairro nao estiverem preenchidos
                {
                     try {
                           resposta = upd.updateStudent(matricula, nome, CPF, dataNascimento, CEP, endereco, responsavel, nomeMae, grau, ano,false);
                        } catch (SQLException ex) {
                            Logger.getLogger(TelaGerenciaAluno.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    break;
                }
                case 6://se o campo pai e mae nao estiverem preenchidos
                {
                   try {
                           resposta = upd.updateStudent(matricula, nome, CPF, dataNascimento, CEP, endereco, bairro , responsavel, grau, ano,false,false);
                        } catch (SQLException ex) {
                            Logger.getLogger(TelaGerenciaAluno.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    break;
                }
                case 7://se os campos pai, bairro e mae nao esiverem preenchidos
                {
                    try {
                            resposta = upd.updateStudent(matricula, nome, CPF, dataNascimento, CEP, endereco, responsavel, grau, ano);
                        } catch (SQLException ex) {
                            Logger.getLogger(TelaGerenciaAluno.class.getName()).log(Level.SEVERE, null, ex);
                        }
                    break;
                }
                default:
                {
                    JOptionPane.showMessageDialog(this, "Erro desconhecido - os campos nao foram interpretados corretamente"
                            + "\n Entre em contato com o desenvolvedor deste aplicativo","Erro !",0);
                    limparInputs();
                    
                }
                
            }
            if(resposta){
                JOptionPane.showMessageDialog(this, "Registro do aluno atualizado com sucesso", "Registro Atualizado", 1);
            }else{
                JOptionPane.showMessageDialog(this, "Ocorreu um erro ao efetuar as alterações do registro\n"
                        + "Entre em contato com o desenvolvedor deste aplicativo", "Erro com o Banco de dados", 0);
                limparInputs();
            }   
        }
        }else{
           JOptionPane.showMessageDialog(this, "Selecione o registro para efetuar as alterações", "Nenhum registro selecionado", 2);
       }
    }//GEN-LAST:event_btnConfirmarActionPerformed

    private void btnLimparTabelaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimparTabelaActionPerformed
        limparInputs(false);
    }//GEN-LAST:event_btnLimparTabelaActionPerformed

    private void checkAddMatriculaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkAddMatriculaActionPerformed
        if(campoMatricula.isEnabled()){
            campoMatricula.setEnabled(false);
            campoMatricula.setText("");
        }else{
            campoMatricula.setEnabled(true);
        }
    }//GEN-LAST:event_checkAddMatriculaActionPerformed
    
   

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConfirmar;
    private javax.swing.JButton btnLimpar;
    private javax.swing.JButton btnLimparTabela;
    private javax.swing.JButton btnPesquisa;
    private javax.swing.JFormattedTextField campoMatricula;
    private javax.swing.JTextField campoNome;
    private javax.swing.JCheckBox checkAddMatricula;
    private javax.swing.JPanel fundo;
    private javax.swing.JComboBox<String> grauEnsino;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblGrauEnsino;
    private javax.swing.JLabel lblInfoMsg;
    private javax.swing.JLabel lblMatricula;
    private javax.swing.JLabel lblNome;
    private javax.swing.JLabel lblTipoPesquisa;
    private javax.swing.JPanel panelPesq;
    private javax.swing.JTable tabelaStudent;
    // End of variables declaration//GEN-END:variables
}
